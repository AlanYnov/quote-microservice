/*
 * Copyright 2002-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.lemal.library.services;

import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.orm.ObjectRetrievalFailureException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.lemal.library.models.Author;
import com.lemal.library.models.Book;
import com.lemal.library.repositories.AuthorRepository;
import com.lemal.library.repositories.BookRepository;

/**
 * Mostly used as a facade for all Bookclinic controllers
 * Also a placeholder for @Transactional and @Cacheable annotations
 *
 * @author Michael Isvy
 * @author Vitaliy Fedoriv
 */
@Service

public class LibraryServiceImpl implements LibraryService {

    private BookRepository bookRepository;
    private AuthorRepository authorRepository;

    @Autowired
     public LibraryServiceImpl(
       		 BookRepository bookRepository,
    		 AuthorRepository authorRepository) {
        this.bookRepository = bookRepository;
        this.authorRepository = authorRepository;
    }

	@Override
	@Transactional(readOnly = true)
	public Collection<Book> findAllBooks() throws DataAccessException {
		return bookRepository.findAll();
	}

	@Override
	@Transactional
	public void deleteBook(Book book) throws DataAccessException {
		bookRepository.delete(book);
	}

	@Override
	@Transactional(readOnly = true)
	public Collection<Author> findAllAuthors() throws DataAccessException {
		return authorRepository.findAll();
	}

	@Override
	@Transactional
	public void deleteAuthor(Author author) throws DataAccessException {
		authorRepository.delete(author);
	}

	@Override
	@Transactional(readOnly = true)
	public Author findAuthorById(int id) throws DataAccessException {
		Author author = null;
		try {
			author = authorRepository.findById(id);
		} catch (ObjectRetrievalFailureException|EmptyResultDataAccessException e) {
		// just ignore not found exceptions for Jdbc/Jpa realization
			return null;
		}
		return author;
	}

	@Override
	@Transactional(readOnly = true)
	public Book findBookById(int id) throws DataAccessException {
		Book book = null;
		try {
			book = bookRepository.findById(id);
		} catch (ObjectRetrievalFailureException|EmptyResultDataAccessException e) {
		// just ignore not found exceptions for Jdbc/Jpa realization
			return null;
		}
		return book;
	}

	@Override
	@Transactional
	public void saveBook(Book book) throws DataAccessException {
		bookRepository.save(book);
		
	}

	@Override
	@Transactional
	public void saveAuthor(Author author) throws DataAccessException {
		authorRepository.save(author);
		
	}

	@Override
	@Transactional(readOnly = true)
	public Collection<Author> findAuthorByLastName(String lastName) throws DataAccessException {
		return authorRepository.findByLastName(lastName);
	}

	@Override
	public Collection<Author> findAuthorsByBookName(String bookName) {
		return authorRepository.findByBooks_Name(bookName);
	}
	
}
