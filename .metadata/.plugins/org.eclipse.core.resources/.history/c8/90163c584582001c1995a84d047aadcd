/*
 * Copyright 2016-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.lemal.library.controllers;

import java.util.Collection;

import javax.transaction.Transactional;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.lemal.library.models.Book;
import com.lemal.library.services.LibraryService;

/**
 * @author Vitaliy Fedoriv
 *
 */

@RestController
@CrossOrigin(exposedHeaders = "errors, content-type")
@RequestMapping("api/books")
public class BookRestController {

	@Autowired
	private LibraryService libraryService;

	@RequestMapping(value = "/{bookId}", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Book> getBook(@PathVariable("bookId") int bookId){
		Book book = this.libraryService.findBookById(bookId);
		if(book == null){
			return new ResponseEntity<Book>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Book>(book, HttpStatus.OK);
	}

	@RequestMapping(value = "", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Collection<Book>> getBooks(){
    	System.out.println(this.libraryService.toString());
		Collection<Book> books = this.libraryService.findAllBooks();
		if(books.isEmpty()){
			return new ResponseEntity<Collection<Book>>(HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Collection<Book>>(books, HttpStatus.OK);
	}

	@RequestMapping(value = "/booktypes", method = RequestMethod.GET, produces = "application/json")
	public ResponseEntity<Collection<BookType>> getBookTypes(){
		return new ResponseEntity<Collection<BookType>>(this.libraryService.findBookTypes(), HttpStatus.OK);
	}

	@RequestMapping(value = "", method = RequestMethod.POST, produces = "application/json")
	public ResponseEntity<Book> addBook(@RequestBody @Valid Book book, BindingResult bindingResult, UriComponentsBuilder ucBuilder){
		BindingErrorsResponse errors = new BindingErrorsResponse();
		HttpHeaders headers = new HttpHeaders();
		if(bindingResult.hasErrors() || (book == null)){
			errors.addAllErrors(bindingResult);
			headers.add("errors", errors.toJSON());
			return new ResponseEntity<Book>(headers, HttpStatus.BAD_REQUEST);
		}
		this.libraryService.saveBook(book);
		headers.setLocation(ucBuilder.path("/api/books/{id}").buildAndExpand(book.getId()).toUri());
		return new ResponseEntity<Book>(book, headers, HttpStatus.CREATED);
	}

	@RequestMapping(value = "/{bookId}", method = RequestMethod.PUT, produces = "application/json")
	public ResponseEntity<Book> updateBook(@PathVariable("bookId") int bookId, @RequestBody @Valid Book book, BindingResult bindingResult){
		BindingErrorsResponse errors = new BindingErrorsResponse();
		HttpHeaders headers = new HttpHeaders();
		if(bindingResult.hasErrors() || (book == null)){
			errors.addAllErrors(bindingResult);
			headers.add("errors", errors.toJSON());
			return new ResponseEntity<Book>(headers, HttpStatus.BAD_REQUEST);
		}
		Book currentBook = this.libraryService.findBookById(bookId);
		if(currentBook == null){
			return new ResponseEntity<Book>(HttpStatus.NOT_FOUND);
		}
		currentBook.setBirthDate(book.getBirthDate());
		currentBook.setName(book.getName());
		currentBook.setType(book.getType());
		currentBook.setAuthor(book.getAuthor());
		this.libraryService.saveBook(currentBook);
		return new ResponseEntity<Book>(currentBook, HttpStatus.NO_CONTENT);
	}

	@RequestMapping(value = "/{bookId}", method = RequestMethod.DELETE, produces = "application/json")
	@Transactional
	public ResponseEntity<Void> deleteBook(@PathVariable("bookId") int bookId){
		Book book = this.libraryService.findBookById(bookId);
		if(book == null){
			return new ResponseEntity<Void>(HttpStatus.NOT_FOUND);
		}
		this.libraryService.deleteBook(book);
		return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
	}


}
