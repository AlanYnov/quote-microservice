/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.lemal.gateway.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.validation.constraints.Digits;
import javax.validation.constraints.NotEmpty;

import org.springframework.beans.support.MutableSortDefinition;
import org.springframework.beans.support.PropertyComparator;
import org.springframework.core.style.ToStringCreator;
import com.lemal.gateway.rest.JacksonCustomAuthorDeserializer;
import com.lemal.gateway.rest.JacksonCustomAuthorSerializer;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * Simple JavaBean domain object representing an author.
 *
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Sam Brannen
 * @author Michael Isvy
 */
@JsonSerialize(using = JacksonCustomAuthorSerializer.class)
@JsonDeserialize(using = JacksonCustomAuthorDeserializer.class)
public class Author {
    @NotEmpty
    private String lastName;

    @NotEmpty
    private String firstName;

    @NotEmpty
    private String birth;

    private Set<Book> books;


    public String getAddress() {
        return this.address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getCity() {
        return this.city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getTelephone() {
        return this.telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }
    @JsonIgnore
    protected Set<Book> getBooksInternal() {
        if (this.books == null) {
            this.books = new HashSet<>();
        }
        return this.books;
    }

    protected void setBooksInternal(Set<Book> books) {
        this.books = books;
    }

    public List<Book> getBooks() {
        List<Book> sortedBooks = new ArrayList<>(getBooksInternal());
        PropertyComparator.sort(sortedBooks, new MutableSortDefinition("name", true, true));
        return Collections.unmodifiableList(sortedBooks);
    }

    public void addBook(Book book) {
        getBooksInternal().add(book);
        book.setAuthor(this);
    }

    /**
     * Return the Book with the given name, or null if none found for this Author.
     *
     * @param name to test
     * @return true if book name is already in use
     */
    public Book getBook(String name) {
        return getBook(name, false);
    }

    /**
     * Return the Book with the given name, or null if none found for this Author.
     *
     * @param name to test
     * @return true if book name is already in use
     */
    public Book getBook(String name, boolean ignoreNew) {
        name = name.toLowerCase();
        for (Book book : getBooksInternal()) {
            if (!ignoreNew || !book.isNew()) {
                String compName = book.getName();
                compName = compName.toLowerCase();
                if (compName.equals(name)) {
                    return book;
                }
            }
        }
        return null;
    }

    @Override
    public String toString() {
        return new ToStringCreator(this)

            .append("id", this.getId())
            .append("new", this.isNew())
            .append("lastName", this.getLastName())
            .append("firstName", this.getFirstName())
            .append("address", this.address)
            .append("city", this.city)
            .append("telephone", this.telephone)
            .toString();
    }
}
